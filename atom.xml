<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mrlaibin.github.io/</id>
    <title>Gridea</title>
    <updated>2019-11-28T08:15:46.942Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://mrlaibin.github.io/"/>
    <link rel="self" href="https://mrlaibin.github.io//atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://mrlaibin.github.io//images/avatar.png</logo>
    <icon>https://mrlaibin.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[FFmpeg处理]]></title>
        <id>https://mrlaibin.github.io//post/ffmpeg-chu-li</id>
        <link href="https://mrlaibin.github.io//post/ffmpeg-chu-li">
        </link>
        <updated>2019-11-14T07:47:40.000Z</updated>
        <content type="html"><![CDATA[<p>音视频的处理流程<br>
<img src="https://mrlaibin.github.io//post-images/1573717726390.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[OpenGL入门(三)加载文件/显示纹理]]></title>
        <id>https://mrlaibin.github.io//post/opengl-ru-men-san-jia-zai-wen-jian-xian-shi-wen-li</id>
        <link href="https://mrlaibin.github.io//post/opengl-ru-men-san-jia-zai-wen-jian-xian-shi-wen-li">
        </link>
        <updated>2019-11-12T01:43:06.000Z</updated>
        <content type="html"><![CDATA[<h2 id="图片解码">图片解码</h2>
<pre><code>unsigned char * DecodeBMP(unsigned char *filecontent,int &amp;width,int &amp;height){
    if(0x4D42==*((unsigned short*)filecontent)){
        int pixelDataOffset=*((int*)(filecontent+10));
        width=*((int*)(filecontent+18));
        height=*((int*)(filecontent+22));
        unsigned char *pixelData=filecontent+pixelDataOffset;
        for (int i=0; i&lt;width*height*3; i+=3) {
            unsigned char temp=pixelData[i];
            pixelData[i]=pixelData[i+2];
            pixelData[i+2]=temp;
        }
        return pixelData;
    }
    return nullptr;
}
</code></pre>
<h2 id="解码生成纹理">解码生成纹理</h2>
<pre><code>GLuint CreateTexture2D(unsigned char *pixelData,int width,int height,GLenum type){
    GLuint texture;
    glGenTextures(1, &amp;texture);
    glBindTexture(GL_TEXTURE_2D, texture);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP);
    glTexImage2D(GL_TEXTURE_2D, 0, type, width, height, 0, type, GL_UNSIGNED_BYTE, pixelData);
    glBindTexture(GL_TEXTURE_2D, 0);
    return texture;
}
</code></pre>
<pre><code>void Init(){
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    glMatrixMode(GL_PROJECTION);
    gluPerspective(60.0f, 800.0f/600.0f, 0.1f, 1000.0f);
    //    skybox.Init(&quot;Res/&quot;);
    texture = CreateTextureFromBMP(&quot;Res/test.bmp&quot;);
}

void Draw(){
    glClearColor(0.1f, 0.4f, 0.6f, 1.0f);
    glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
    glEnable(GL_DEPTH_TEST);
    glColor4ub(255, 255, 255, 255);
    
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, texture);
    glBegin(GL_POLYGON);
    glTexCoord2f(0.0f, 0.0f);
    
    //    glBegin(GL_QUADS);
    glVertex3f(-0.2f,-0.2f,-0.4f);
    glTexCoord2f(1.0f, 0.0f);
    glVertex3f(0.2f, -0.2f, -0.4f);
    glTexCoord2f(1.0f, 1.0f);
    glVertex3f(0.2f, 0.0f, -0.4f);
    glTexCoord2f(0.0f, 1.0f);
    glVertex3f(-0.2f, 0.0f, -0.4f);
    
    //    glColor4ub(255, 0, 0, 255);
    //    glVertex3f(-0.1f,-0.1f,-0.3f);
    //    glVertex3f(0.1f, -0.1f, -0.3f);
    //    glVertex3f(0.1f, 0.0f, -0.3f);
    //    glVertex3f(-0.1f, 0.0f, -0.3f);
    glEnd();
    //    skybox.Draw();
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[OpenGL (二)简单操作]]></title>
        <id>https://mrlaibin.github.io//post/opengl-er-jian-dan-cao-zuo</id>
        <link href="https://mrlaibin.github.io//post/opengl-er-jian-dan-cao-zuo">
        </link>
        <updated>2019-11-12T01:42:51.000Z</updated>
        <content type="html"><![CDATA[<h2 id="示例代码">示例代码</h2>
<pre><code>void Draw(){
    glPolygonMode(GL_FRONT, GL_LINE);
    glClearColor(0.1f, 0.4f, 0.6f, 1.0f);
    glClear(GL_COLOR_BUFFER_BIT);
    glColor4ub(255, 255, 255, 255);
    glBegin(GL_TRIANGLE_FAN);
    glVertex3f(0.0f,0.0f,-0.4f);
    glVertex3f(0.2f, -0.2f, -0.4f);
    glVertex3f(0.2f, 0.0f, -0.4f);
    glVertex3f(0.2f, 0.2f, -0.4f);
    glEnd();
}
</code></pre>
<p>glBegin指定图元类型:<br>
OpenGL 2.1是OpenGL Legecy，它支持的图元类型包括一下10种：</p>
<pre><code>GL_POINTS       //点
GL_LINES        //线段
GL_LINE_STRIP   //多段线
GL_LINE_LOOP    //线圈
GL_TRIANGLES    //三角形
GL_TRIANGLE_STRIP //三角形条带
GL_TRIANGLE_FAN   //三角形扇
GL_QUADS          //四边形
GL_QUAD_STRIP     //四边形条带
GL_POLYGON        //多边形(凸)
</code></pre>
<figure data-type="image" tabindex="1"><img src="http://laibin.ml/usr/uploads/2019/07/2607347718.png" alt=""></figure>
<h1 id="glvertex3f">glVertex3f</h1>
<p>glVertex3f 函数用于指定每个点的坐标顶点,由x/y/z构成.</p>
<p>开始画图</p>
<pre><code>glColor4ub(255,255,255,255);
glBegin(GL_TRiangles);
</code></pre>
<p>画三角形逆时针</p>
<pre><code>glvertex3f(-0.2f,-0.2f,-0.4f);
glVertex3f(0.2f,-0.2f,-0.4f);左下角
glVertex3f(0.0f,0.2f,-0.4f);
glend
</code></pre>
<h2 id="多边形gl_polygon">多边形GL_POLYGON</h2>
<pre><code>void Draw(){
    glClearColor(0.1f, 0.4f, 0.6f, 1.0f);
    glClear(GL_COLOR_BUFFER_BIT);
    glColor4ub(255, 255, 255, 255);
    glBegin(GL_POLYGON);
    glVertex3f(-0.2f,-0.2f,-0.4f);
    glVertex3f(0.2f, -0.2f, -0.4f);
    glVertex3f(0.2f, 0.0f, -0.4f);
    glVertex3f(-0.2f, 0.0f, -0.4f);
    glEnd();
}
</code></pre>
<h2 id="缩放">缩放</h2>
<pre><code>void Draw(){
    glClearColor(0.1f, 0.4f, 0.6f, 1.0f);
    glClear(GL_COLOR_BUFFER_BIT);
    glColor4ub(255, 255, 255, 255);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
	//
    glScalef(0.1f,0.1f,0.1f);//对原来的xyz的
	//
    glBegin(GL_POLYGON);
    glVertex3f(-0.2f,-0.2f,-0.4f);
    glVertex3f(0.2f, -0.2f, -0.4f);
    glVertex3f(0.2f, 0.0f, -0.4f);
    glVertex3f(-0.2f, 0.0f, -0.4f);
    glEnd();
}
</code></pre>
<h2 id="旋转动画">旋转动画</h2>
<pre><code>void Draw(){
    glClearColor(0.1f, 0.4f, 0.6f, 1.0f);
    glClear(GL_COLOR_BUFFER_BIT);
    glColor4ub(255, 255, 255, 255);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    static float angle = 0.0f;
    float deltatime=0.016f;
    angle-=deltatime*30.0f;
    glRotated(angle, 0.0f, 0.0f, 1.0f);
    glBegin(GL_POLYGON);
    glVertex3f(-0.2f,-0.2f,-0.4f);
    glVertex3f(0.2f, -0.2f, -0.4f);
    glVertex3f(0.2f, 0.0f, -0.4f);
    glVertex3f(-0.2f, 0.0f, -0.4f);
    glEnd();
}

</code></pre>
<h2 id="缩放动画">缩放动画</h2>
<pre><code>  static float distance = 10.f;
    distance-=0.016f*1.0f;
    gluLookAt(0.0f, 0.0f, distance, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f);
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[React Hooks （一）]]></title>
        <id>https://mrlaibin.github.io//post/react-hooks-yi</id>
        <link href="https://mrlaibin.github.io//post/react-hooks-yi">
        </link>
        <updated>2019-11-12T01:42:39.000Z</updated>
        <content type="html"><![CDATA[<h1 id="解决什么问题">解决什么问题</h1>
<p>react hooks 要解决的问题是状态逻辑复用，在render-props和higher-order components之外的另外一种共享方案，同时JSX嵌套问题。</p>
<h1 id="例子">例子</h1>
<p>来个简单的例子</p>
<pre><code>import React, { useState } from 'react';

function Example() {
  // 声明一个新的叫做 “count” 的 state 变量
  const [count, setCount] = useState(0);
 // 声明多个 state 变量！
  const [age, setAge] = useState(42);
  const [fruit, setFruit] = useState('banana');
  const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);
  return (
    &lt;View&gt;
      &lt;Text&gt;{`You clicked ${count} times`}&lt;/Texxt&gt;
      &lt;Text onPress={() =&gt; setCount(count + 1)}&gt;
        Click me
      &lt;/Text&gt;
    &lt;/View&gt;
  );
}
</code></pre>
<p><code>userState</code>是一个hook。通过函数组件里调用它来给组件添加一些内部state。React会在重复渲染时保留这个state。<code>useState</code>会返回一对值：当前状态和一个让你更新它的函数，可以在事件处理或者某个地方调用这个函数。类似<code>this.setState</code>,但它不会把新的state和旧的state进行合并。<br>
<code>useState</code>唯一的参数就是初始state。在上面的例子中，我们的计数器是从零开始的，所以初始state就是<code>0</code>。值得注意的是，不同于 <code>this.state</code>，这里的 <code>state</code> 不一定要是一个对象 —— 如果你有需要，它也可以是。这个初始 <code>state</code> 参数只有在第一次渲染时会被用到。</p>
<h1 id="什么是-hook">什么是 Hook?</h1>
<p>Hook 是一些可以让你在函数组件里“钩入” React state 及生命周期等特性的函数。Hook 不能在 class 组件中使用 —— 这使得你不使用 class 也能使用 React。</p>
<p>React 内置了一些像 useState 这样的 Hook。你也可以创建你自己的 Hook 来复用不同组件之间的状态逻辑。</p>
<h2 id="effect-hook">Effect Hook</h2>
<pre><code>import React, { useState, useEffect } from 'react';

function Example() {
  const [count, setCount] = useState(0);

  // 相当于 componentDidMount 和 componentDidUpdate:
  useEffect(() =&gt; {
    // 使用浏览器的 API 更新页面标题
    document.title = `You clicked ${count} times`;
  });

  return (
    &lt;div&gt;
      &lt;p&gt;You clicked {count} times&lt;/p&gt;
      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;
        Click me
      &lt;/button&gt;
    &lt;/div&gt;
  );
}
</code></pre>
<p>当条用useEffect 时，就是在告诉React 在完成对Dom的更改后运行你的‘副作用’函数。<br>
由于副作用函数是在组件内生命的，所以他们可以访问到组建的props和state。默认情况下，React会在每次渲染后条用副作用函数——包括第一次渲染的时候。</p>
<p>副作用函数还可以通过返回一个函数来指定如何“清除”副作用。例如，在下面的组件中使用副作用函数来订阅好友的在线状态，并通过取消订阅来进行清除操作：</p>
<pre><code>import React, { useState, useEffect } from 'react';

function FriendStatus(props) {
  const [isOnline, setIsOnline] = useState(null);

  function handleStatusChange(status) {
    setIsOnline(status.isOnline);
  }

  useEffect(() =&gt; {
    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);

    return () =&gt; {
      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);
    };
  });

  if (isOnline === null) {
    return 'Loading...';
  }
  return isOnline ? 'Online' : 'Offline';
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[nginx日志分割]]></title>
        <id>https://mrlaibin.github.io//post/nginx-ri-zhi-fen-ge</id>
        <link href="https://mrlaibin.github.io//post/nginx-ri-zhi-fen-ge">
        </link>
        <updated>2019-11-12T01:42:24.000Z</updated>
        <content type="html"><![CDATA[<h2 id="直接在conf中使用">直接在conf中使用</h2>
<pre><code>server {
          listen 80 default_server;
          if ($time_iso8601 ~ &quot;^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})&quot;) {
                  set $year $1;
                  set $month $2;
                  set $day $3;
          }
          access_log /app/logs/api-access-$year-$month-$day.log main;
          error_log /app/logs/api-error.log;
          # Php files
          location ~ \.php$ {
                  try_files $uri =404;
                  fastcgi_pass unix:/var/run/php-fpm7.sock;
          }
 }
</code></pre>
<h2 id="logrotate">logrotate</h2>
<pre><code>/usr/local/nginx/logs/access.log  {
	daily
	rotate 7
	missingok
	dateext
	compress
	delaycompress
	notifempty
	sharedscripts
	postrotate	[ -e /usr/local/nginx/logs/nginx.pid ] &amp;&amp; kill -USR1 `cat /usr/local/nginx/logs/nginx.pid`
	endscript
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[OpenGL 入门(一)初始化view]]></title>
        <id>https://mrlaibin.github.io//post/opengl-ru-men-yi-chu-shi-hua-view</id>
        <link href="https://mrlaibin.github.io//post/opengl-ru-men-yi-chu-shi-hua-view">
        </link>
        <updated>2019-11-12T01:42:11.000Z</updated>
        <content type="html"><![CDATA[<h1 id="init">init()</h1>
<pre><code>void Init(){
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    glMatrixMode(GL_PROJECTION);
    gluPerspective(60.0f, 800.0f/600.0f, 0.1f, 1000.0f);
}

</code></pre>
<h2 id="glmatrixmode">glMatrixMode</h2>
<p>mode 指定哪一个矩阵堆栈是下一个矩阵操作的目标,可选值: GL_MODELVIEW、GL_PROJECTION、GL_TEXTURE.<br>
glMatrixMode设置当前矩阵模式:<br>
GL_MODELVIEW,对模型视景矩阵堆栈应用随后的矩阵操作.<br>
GL_PROJECTION,对投影矩阵应用随后的矩阵操作.<br>
GL_TEXTURE,对纹理矩阵堆栈应用随后的矩阵操作.</p>
<h2 id="glloadidentity">glLoadIdentity</h2>
<p>glLoadIdentity该函数的功能是重置当前指定的矩阵为单位矩阵.</p>
<h2 id="gluperspective">gluPerspective</h2>
<p>gluPerspective这个函数指定了观察的视景体（frustum为锥台的意思，通常译为视景体）在世界坐标系中的具体大小，一般而言，其中的参数aspect应该与窗口的宽高比大小相同。比如说，aspect=2.0表示在观察者的角度中物体的宽度是高度的两倍，在视口中宽度也是高度的两倍，这样显示出的物体才不会被扭曲。</p>
<pre><code>gluPerspective(60.0f, 800.0f/600.0f, 0.1f, 1000.0f);

void gluPerspective(
GLdouble fovy, //角度
GLdouble aspect,//视景体的宽高比,window 初始化比例
GLdouble zNear,//沿z轴方向的两裁面之间的距离的近处
GLdouble zFar //沿z轴方向的两裁面之间的距离的远处
)
</code></pre>
<h1 id="draw">draw()</h1>
<pre><code>void Draw(){
    glClearColor(0.1f, 0.4f, 0.6f, 1.0f);
    glClear(GL_COLOR_BUFFER_BIT);
}
</code></pre>
<h3 id="glclearcolor">glClearColor</h3>
<p>通过glClear使用红，绿，蓝以及AFA值来清除颜色缓冲区的，并且都被归一化在（0，1）之间的值，其实就是清空当前的所有颜色。</p>
<h2 id="glclear">glClear</h2>
<p>可以使用 | 运算符组合不同的缓冲标志位，表明需要清除的缓冲，例如glClear（GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT）表示要清除颜色缓冲以及深度缓冲，可以使用以下标志位<br>
<code>GL_COLOR_BUFFER_BIT</code>: 当前可写的颜色缓冲<br>
<code>GL_DEPTH_BUFFER_BIT</code>: 深度缓冲<br>
<code>GL_ACCUM_BUFFER_BIT</code>: 累积缓冲<br>
<code>GL_STENCIL_BUFFER_BIT</code>: 模板缓冲</p>
<h1 id="简单地说glflush">简单地说glFlush</h1>
<p>简单地说glFlush()就是强制刷新，OpenGL是使用一条<code>渲染管线</code>线性处理命令的，一般情况下，我们提交给OpenGL的指令并不是马上送到<code>驱动程序</code>里执行的，而是放到一个缓冲区里面，等这个缓冲区满了再一次过发到驱动程序里执行；很多时候只有几条指令是填充不满那个缓冲区的，就是说这些指令根本没有被发送到驱动里，所以我们要调用glFlush来强制把这些指令送到驱动里进行处理。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Android 组件化实践]]></title>
        <id>https://mrlaibin.github.io//post/android-zu-jian-hua-shi-jian</id>
        <link href="https://mrlaibin.github.io//post/android-zu-jian-hua-shi-jian">
        </link>
        <updated>2019-11-12T01:41:58.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://img.hacpai.com/bing/20190217.jpg?imageView2/1/w/960/h/540/interlace/1/q/100" alt=""></figure>
<h1 id="项目情况">项目情况</h1>
<p>1、两个项目之间的不同点越来越大<br>
2、项目中存在大量对项目名称的判断，但是不同点越来越多<br>
3、项目部署编译慢，大量RN的module 需要修改build.gradle 的配置文件。</p>
<h1 id="期望">期望</h1>
<p>1、减少编译时间<br>
2、减少rn module更新带来的编译问题，统一管理第三方库的依赖版本<br>
3、减少项目的重复代码。<br>
4、对项目进行一次大规模升级（架构、网络、数据）</p>
<h1 id="实现方式">实现方式</h1>
<p>打算使用ARouter项目实现。</p>
<p>在对arouter项目进行测试时发现了一些问题。网上的demo都是对一个项目进行使用，并未考虑到实际项目中的问题。如：<br>
1、项目需要多渠道配置，因为多渠道利用productFlavors配置的，想要打包任意一渠道时有比较耗时。<br>
如果项目中任意一module或library使用了其他渠道配置，整个AS项目的module都需要变更。无法实现AModule用主题A，BModule用主题B，进行同时开发。<br>
2、项目如果配置多渠道后打包例如项目中lib需要不同的颜色和主题，就许对lib进行渠道化配置。而要配置变更需要整个AS项目的module都变更。无法实现AModule用主题A，BModule用主题B，进行同时开发。<br>
3、利用私有仓库实现，将app的基本主题进行多次打包，并上传到maven仓库。也就是说各个module在AS中不存在互相依赖，各个module只对mave仓库中的aar依赖。</p>
<ol>
<li>实现全量渠道包的生成.</li>
<li>实现单个渠道包的生成.</li>
<li>实现渠道的切换.</li>
<li>实现manifestPlaceholders功能</li>
<li>实现根据git提交信息，快速对module快速更新。</li>
</ol>
<p>为同时满足上述4条内容，因此使用第三种办法</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[BigDecimal 常用方法]]></title>
        <id>https://mrlaibin.github.io//post/bigdecimal-chang-yong-fang-fa</id>
        <link href="https://mrlaibin.github.io//post/bigdecimal-chang-yong-fang-fa">
        </link>
        <updated>2019-11-12T01:41:37.000Z</updated>
        <content type="html"><![CDATA[<p>初始化方法</p>
<pre><code>BigDecimal b1 = new BigDecimal(Double.toString(0.96)); 
BigDecimal b2 = BigDecimal.valueOf(0.86);
</code></pre>
<p>常用方发</p>
<pre><code>public BigDecimal add(BigDecimal value);                        //加法
public BigDecimal subtract(BigDecimal value);                   //减法 
public BigDecimal multiply(BigDecimal value);                   //乘法
public BigDecimal divide(BigDecimal value);                     //除法
</code></pre>
<p>相加后进行转换</p>
<pre><code>BigDecimal b1 = new BigDecimal(Double.valueOf(value1));
BigDecimal b2 = new BigDecimal(Double.valueOf(value2)); 
return b1.add(b2).doubleValue();
</code></pre>
<p>在运算时设定精度<br>
<code>b1.divide(b2, scale).doubleValue();</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[firewall-cmd日常技能]]></title>
        <id>https://mrlaibin.github.io//post/firewall-cmd-ri-chang-ji-neng</id>
        <link href="https://mrlaibin.github.io//post/firewall-cmd-ri-chang-ji-neng">
        </link>
        <updated>2019-11-12T01:41:22.000Z</updated>
        <content type="html"><![CDATA[<p>启动相关</p>
<pre><code>systemctl start  firewalld #启动
systemctl restart  firewalld #重启
systemctl stop  firewalld #停止
firewall-cmd --state #状态
firewall-cmd --get-default-zone  默认分区
firewall-cmd --get-active-zones #活动分区
</code></pre>
<p>查看开启的服务</p>
<p><code>firewall-cmd --list-services</code></p>
<p>查看可以开启的服务</p>
<p><code>firewall-cmd --get-services</code></p>
<p>查看default分区开启的端口</p>
<p><code>firewall-cmd --zone=public --list-all</code></p>
<p>添加端口</p>
<p><code>firewall-cmd --zone=public --remove-port=5060-5059/udp --permanent</code></p>
<pre><code>firewall-cmd --zone=public --add-port=5060-5059/udp --permanent #添加--permanent为永久生效

</code></pre>
<p>重载配置</p>
<p><code>firewall-cmd --reload</code></p>
<p>封禁网段</p>
<pre><code># firewall-cmd --permanent --zone=public --new-ipset=blacklist --type=hash:net
# firewall-cmd --permanent --zone=public --ipset=blacklist --add-entry=222.222.222.0/24
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ios 利用xcodebuild 构建workspace 与 project]]></title>
        <id>https://mrlaibin.github.io//post/ios-li-yong-xcodebuild-gou-jian-workspace-yu-project</id>
        <link href="https://mrlaibin.github.io//post/ios-li-yong-xcodebuild-gou-jian-workspace-yu-project">
        </link>
        <updated>2019-11-12T01:41:11.000Z</updated>
        <content type="html"><![CDATA[<p>We have spent quite some time tuning our automated build scripts.</p>
<p>You can build a specific scheme that is part of a Xcode<strong>workspace</strong>(<em>.xcworkspace</em>) by using the command:</p>
<p><code>xcodebuild -workspace *yourWorkspaceFile* -scheme *schemeName* -sdk &quot;*targetSDK*&quot; -configuration *buildConfig* CODE_SIGN_IDENTITY=&quot;*NameOfCertificateIdentity*&quot; PROVISIONING_PROFILE=&quot;*ProvisioningProfileName&quot; OTHER_CODE_SIGN_FLAGS=&quot;--keychain *keyChainName*&quot;</code><br>
打包到指定目录<br>
<code>xcodebuild -workspace AssociationAssistant.xcworkspace -scheme 美丽村镇 -sdk &quot;iphonesimulator&quot; -configuration Release -derivedDataPath .</code><br>
To build a Xcode project (<em>.xcodeproj</em>), use this:</p>
<p><code>xcodebuild -project &quot;*path/fileName*.xcodeproj&quot; -target &quot;*targetName*&quot; -sdk &quot;*targetSDK*&quot; -configuration *buildConfig* CODE_SIGN_IDENTITY=&quot;*NameOfCertificateIdentity*&quot; PROVISIONING_PROFILE=&quot;*ProvisioningProfileName&quot; OTHER_CODE_SIGN_FLAGS=&quot;--keychain *keyChainName*&quot;</code></p>
<p>Where:<br>
<em>yourWorkspaceFile</em>: path and filename of workspace file, e.g.<strong>path/CoolGame.xcworkspace</strong>* (points to ./path/CoolGame.xcworkspace)*<br>
<em>schemeName</em>: name of scheme defined in project, e.g.<strong>CoolGame</strong><br>
<em>targetName</em>: name of build target in project<br>
<em>targetSDK</em>: e.g.<strong>iphoneos</strong><br>
<em>buildConfig</em>:<strong>Debug</strong>,<strong>Release</strong>or<strong>Distribution</strong><br>
<em>NameOfCertificateIdentity</em>: e.g.<strong>iPhone Developer: My Name (738d039880d)</strong><br>
<em>ProvisioningProfileName</em>: e.g.<strong>Cool Game Development Profile</strong><br>
<em>keyChainName</em>: points to your keychain that can open development certificate, e.g.<strong>/Users/johnsmith/Library/Keychains/login.keychain</strong></p>
]]></content>
    </entry>
</feed>